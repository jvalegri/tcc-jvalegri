"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/stores/material-store.ts":
/*!**************************************!*\
  !*** ./lib/stores/material-store.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMaterialStore: function() { return /* binding */ useMaterialStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* __next_internal_client_entry_do_not_use__ useMaterialStore auto */ \nconst useMaterialStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)((set, get)=>({\n        // Estado inicial\n        materials: [],\n        movements: [],\n        currentProjectId: null,\n        currentUserId: null,\n        isLoading: false,\n        error: null,\n        // Setters\n        setMaterials: (materials)=>set({\n                materials\n            }),\n        setMovements: (movements)=>set({\n                movements\n            }),\n        setCurrentProjectId: (projectId)=>set({\n                currentProjectId: projectId\n            }),\n        setCurrentUserId: (userId)=>set({\n                currentUserId: userId\n            }),\n        setError: (error)=>set({\n                error\n            }),\n        // Buscar materiais do banco de dados\n        fetchMaterials: async (projectId)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/materials?projectId=\".concat(projectId));\n                if (!response.ok) {\n                    throw new Error(\"Erro ao buscar materiais: \".concat(response.status));\n                }\n                const materials = await response.json();\n                set({\n                    materials,\n                    isLoading: false\n                });\n            } catch (error) {\n                console.error(\"Erro ao buscar materiais:\", error);\n                set({\n                    error: error instanceof Error ? error.message : \"Erro desconhecido\",\n                    isLoading: false\n                });\n                throw error;\n            }\n        },\n        // Buscar movimentações do banco de dados\n        fetchMovements: async (projectId)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/movements?projectId=\".concat(projectId));\n                if (!response.ok) {\n                    throw new Error(\"Erro ao buscar movimenta\\xe7\\xf5es: \".concat(response.status));\n                }\n                const movements = await response.json();\n                set({\n                    movements,\n                    isLoading: false\n                });\n            } catch (error) {\n                console.error(\"Erro ao buscar movimenta\\xe7\\xf5es:\", error);\n                set({\n                    error: error instanceof Error ? error.message : \"Erro desconhecido\",\n                    isLoading: false\n                });\n                throw error;\n            }\n        },\n        // Adicionar material via API\n        addMaterial: async (material, projectId)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/materials\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(material)\n                });\n                if (!response.ok) {\n                    throw new Error(\"Erro ao adicionar material: \".concat(response.status));\n                }\n                const newMaterial = await response.json();\n                // Atualizar estado local\n                set((state)=>({\n                        materials: [\n                            ...state.materials,\n                            newMaterial\n                        ],\n                        isLoading: false\n                    }));\n            } catch (error) {\n                console.error(\"Erro ao adicionar material:\", error);\n                set({\n                    error: error instanceof Error ? error.message : \"Erro desconhecido\",\n                    isLoading: false\n                });\n                throw error;\n            }\n        },\n        // Atualizar material via API\n        updateMaterial: async (id, updatedMaterial)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                // Preparar dados para a API\n                const apiData = {\n                    id,\n                    name: updatedMaterial.name,\n                    description: updatedMaterial.notes,\n                    type: updatedMaterial.category,\n                    currentQuantity: updatedMaterial.quantity,\n                    unit: updatedMaterial.unit,\n                    price: updatedMaterial.price,\n                    supplier: updatedMaterial.supplier,\n                    minStock: updatedMaterial.minStock\n                };\n                const response = await fetch(\"/api/materials\", {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(apiData)\n                });\n                if (!response.ok) {\n                    throw new Error(\"Erro ao atualizar material: \".concat(response.status));\n                }\n                const updatedMaterialResponse = await response.json();\n                // Atualizar estado local\n                set((state)=>({\n                        materials: state.materials.map((m)=>m.id === id ? updatedMaterialResponse : m),\n                        isLoading: false\n                    }));\n            } catch (error) {\n                console.error(\"Erro ao atualizar material:\", error);\n                set({\n                    error: error instanceof Error ? error.message : \"Erro desconhecido\",\n                    isLoading: false\n                });\n                throw error;\n            }\n        },\n        // Atualizar quantidade (placeholder para futura implementação)\n        updateMaterialQuantity: (id, newQuantity)=>{\n            set((state)=>({\n                    materials: state.materials.map((m)=>m.id === id ? {\n                            ...m,\n                            quantity: newQuantity\n                        } : m)\n                }));\n        },\n        // Deletar material (placeholder para futura implementação)\n        deleteMaterial: (id)=>{\n            set((state)=>({\n                    materials: state.materials.filter((m)=>m.id !== m)\n                }));\n        },\n        // Adicionar movimentação via API\n        addMovement: async (movement, projectId, userId)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/movements\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        ...movement,\n                        projectId,\n                        userId\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error(\"Erro ao adicionar movimenta\\xe7\\xe3o: \".concat(response.status));\n                }\n                const newMovement = await response.json();\n                // Atualizar estado local\n                set((state)=>({\n                        movements: [\n                            ...state.movements,\n                            newMovement\n                        ],\n                        isLoading: false\n                    }));\n                // Atualizar quantidade do material localmente - CORRIGIDO: usando 'type' em vez de 'actionType'\n                if (movement.type === \"entrada\") {\n                    set((state)=>({\n                            materials: state.materials.map((m)=>m.id === movement.materialId ? {\n                                    ...m,\n                                    quantity: m.quantity + movement.quantity\n                                } : m)\n                        }));\n                } else {\n                    set((state)=>({\n                            materials: state.materials.map((m)=>m.id === movement.materialId ? {\n                                    ...m,\n                                    quantity: Math.max(0, m.quantity - movement.quantity)\n                                } : m)\n                        }));\n                }\n            } catch (error) {\n                console.error(\"Erro ao adicionar movimenta\\xe7\\xe3o:\", error);\n                set({\n                    error: error instanceof Error ? error.message : \"Erro desconhecido\",\n                    isLoading: false\n                });\n                throw error;\n            }\n        },\n        // Limpar dados\n        clearData: ()=>{\n            set({\n                materials: [],\n                movements: [],\n                currentProjectId: null,\n                currentUserId: null,\n                isLoading: false,\n                error: null\n            });\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/stores/material-store.ts\n"));

/***/ })

});